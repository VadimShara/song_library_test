// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/info": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves info about song based on given parametres",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "song",
                        "name": "song",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_user.Song"
                        }
                    }
                }
            }
        },
        "/new": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "summary": "Adding a new song to the library",
                "responses": {
                    "201": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/remove": {
            "delete": {
                "summary": "Deleting a song by its group and name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "song",
                        "name": "song",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/search": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves songs based on given parametres",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "song",
                        "name": "song",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_user.Song"
                        }
                    }
                }
            }
        },
        "/update": {
            "patch": {
                "summary": "Update song information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "song",
                        "name": "song",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No content"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_user.Song": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string",
                    "example": "Pizza"
                },
                "id": {
                    "type": "string"
                },
                "link": {
                    "type": "string",
                    "example": "https://www.youtube.com/watch?v=Eyp3bnl5Cng"
                },
                "releaseDate": {
                    "type": "string",
                    "example": "24.10.2014"
                },
                "song": {
                    "type": "string",
                    "example": "Lift"
                },
                "text": {
                    "type": "string",
                    "example": "Скорее, минуты летите, чтобы я вас не заметил\nИ поспешите на третий, свободы мне принесите\nСкорее, минуты летите, чтобы я вас не заметил\nИ поспешите на третий, откройте, освободите\n"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:10000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Song-libary Swagger API",
	Description:      "Swagger API for Golang Project Song-library",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
